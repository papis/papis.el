* Papis.el

[[https://papis.github.io/images/emacs-papis.gif]]

** Motivation

The main motivation of this package is to make it
easy to interact with ~org-mode~ and
~papis~.

We do not want to reinvent the wheel, so this project
should be thought to play well with the very good
package [[https://github.com/jkitchin/org-ref][org-ref]].


** Disclaimer

If you're an emacs lisp hacker, feel free to chip in.
Otherwise this project should be treated as β software
and it might just completely change in the future.


** What is implemented

I have implemented some functions that I use in my day-to-day
research and worfklow.

At some point it will get documented...

* Implementation
  :PROPERTIES:
    :header-args:emacs-lisp: :tangle papis.el
    :header-args:emacs-lisp+: :comments both
    :header-args:emacs-lisp+: :results silent
  :END:
=papis.el= is written as a literate program [cite:@LiteratePrograKnuth1984].
** Generalities

- We interact with papis through the papis' json exporter.
- We use ~org-links~ to get information directly from papis.

The libraries that we will need are therefore:
#+begin_src emacs-lisp :noweb yes
(require 'ol)
(require 'json)
#+end_src

** Variables

#+begin_src emacs-lisp
(defcustom papis--temp-output-file
  nil
  "This variable holds the papis temporary output file where the json
  output is dumped"
  :type 'string)

(defcustom papis-binary-path
  "papis"
  "The binary path for papis.
   You might have papis installed for instance in some
   virtual environment"
  :type 'string)

(defcustom papis-read-format-function
  #'papis-default-read-format-function
  "Function taking a papis document (hashmap) and outputing a
   string representation of it to be fed into the reader.")

(defcustom papis--query-prompt
  "Papis Query: "
  "The prompt to show users in order to accept a query
  "
  :type 'string)
#+end_src

You can set the

***  =papis-library=
You can set the main library used in papis by setting
#+begin_src emacs-lisp :tangle no :eval no 
(setq papis-library "my-other-library")
#+end_src

 #+begin_src emacs-lisp
(defcustom papis-library
  nil
  "papis library to be used in commands.
   If it is set to nil then the default library of your system will
   be used.
  "
  :type 'string)
 #+end_src

** Document
#+begin_src emacs-lisp
(defun papis--doc-get-folder (doc)
  (papis--doc-get doc "_papis_local_folder"))

(defun papis--id (doc)
  (let ((id (papis--doc-get doc "papis_id")))
    (unless id
      (error "Document '%s' does not have an id!"
             doc))
    id))

(defun papis--id-query (doc)
  (format "papis_id:%s" (papis--id doc)))
#+end_src

#+begin_src emacs-lisp
(defun papis--get-file-paths (doc)
  (mapcar (lambda (f) (concat (papis--doc-get-folder doc) "/" f))
          (papis--doc-get doc "files")))

(defun papis--doc-get (doc key)
  (gethash key doc))

(defun papis--get-ref (doc)
  (papis--doc-get doc "ref"))
#+end_src

#+begin_src emacs-lisp
(defun papis--doc-update (doc)
  (let ((folder (papis--doc-get-folder doc)))
    (papis--cmd (concat "update --doc-folder " folder))))
#+end_src
** Commands
*** Introduction
Most papis commands will need a query, the macro =@papis-query= will
take care of having the same query prompt in all commands.
#+begin_src emacs-lisp

(defmacro @papis-query ()
  `(interactive ,papis--query-prompt))
#+end_src

**** Issuing commands to the shell
 The main interface with papis commands will be =papis--cmd=
 which is a function intended for library writers.
 #+begin_src emacs-lisp
(defun papis--cmd (cmd &optional with-stdout)
  "Helping function to run papis commands"
  (let ((lib-flags (if papis-library
                       (concat "-l " papis-library)
                     ""))
        (sys (if with-stdout
                 #'shell-command-to-string
               #'shell-command)))
    (funcall sys
     (format "%s %s %s" papis-binary-path lib-flags cmd))))
 #+end_src
**** =papis-query=

A papis document object is represented in =papis.el=
as a =hashtable=, and the command that turns a query
into a list of hashtables is =papis-query=.
This is done via the papis' =json= exporter, i.e.,
we query python and get a json document with the documents that
emacs reads in.

 #+begin_src emacs-lisp
(defun papis-query (query)
  "Make a general papis query:
   it returns a list of hashtables where every hashtable is a papis document"
  (let* ((json-object-type 'hash-table)
         (json-array-type 'list)
         (json-key-type 'string)
         (papis--temp-output-file (make-temp-file "papis-emacs-"))
         (exit-code (papis-json query papis--temp-output-file)))
    (if (not (eq exit-code 0))
        (error "Something happened running the papis command"))
    (json-read-file papis--temp-output-file)))
 #+end_src
*** =papis-open=

The cornerstone of papis is opening documents, in emacs
the command is also available:


#+begin_src emacs-lisp
(defun papis-open (doc)
  (interactive (list (papis--read-doc)))
  (let* ((files (papis--get-file-paths doc))
         (file (pcase (length files)
                 (1 (car files))
                 (0 (error "Doc has no files"))
                 (_ (completing-read "file: " files)))))
    (split-window-horizontally)
    (find-file file)))
#+End_src
*** =papis-notes=

#+begin_src emacs-lisp
(defun papis-notes (doc)
  (interactive (list (papis--read-doc)))
  (let (
        ;; (folder (papis--cmd (format "list %s" (papis--id-query doc)) t))
        (folder (papis--doc-get-folder doc))
        (maybe-notes (papis--doc-get doc "notes")))
    (when maybe-notes
      (find-file (f-join folder maybe-notes)))))

#+end_src


*** TODO =papis-edit=

You can edit the info files using =papis-edit=,
notice that commiting the
Implement waiting after editing the file like
#+begin_src emacs-lisp
(defun papis-edit (doc)
  (interactive (list (papis--read-doc)))
  (let* ((folder (papis--doc-get-folder doc))
         (info (concat folder "/" "info.yaml")))
    (find-file info)
    (papis--doc-update doc)))
#+end_src

*** =papis-exec=

#+begin_src emacs-lisp
(defun papis-exec (python-file &optional arguments)
  (let ((fmt "exec %s %s"))
    (papis--cmd (format fmt
                        python-file
                        (or arguments ""))
                t)))
#+end_src

*** =papis-export=

#+begin_src emacs-lisp
(defun papis-json (query outfile)
  (papis--cmd (format "export --all --format json '%s' -o %s"
                      query
                      outfile)))

(defun papis-bibtex (query outfile)
  (papis--cmd (format "export --all --format bibtex '%s' -o %s"
                      query
                      outfile)))
#+end_src
** Document reader
The main dynamic searcher used in papis is [[https://oremacs.com/swiper/][ivy]].
#+begin_src emacs-lisp
(defun papis-default-read-format-function (doc)
  `(
    ,(format "%s\n\t%s\n\t«%s» +%s %s"
             (papis--doc-get doc "title")
             (papis--doc-get doc "author")
             (papis--doc-get doc "year")
             (or (papis--doc-get doc "tags") "")
             (let ((n (papis--doc-get doc "_note"))) (if n (concat ":note " n) "")))
    .
    ,doc))

(defun papis--read-doc ()
  (let* ((results (papis-query (read-string papis--query-prompt
                                            nil 'papis)))
         (formatted-results (mapcar papis-read-format-function results)))
    (cdr (assoc
          (completing-read "Select an entry: " formatted-results)
          formatted-results))))

(defun papis--from-id (papis-id)
  (let* ((query (format "papis_id:%s" papis-id))
         (results (papis-query query)))
    (pcase (length results)
      (0 (error "No documents found with papis_id '%s'"
                papis-id))
      (1 (car results))
      (_ (error "Too many documents (%d) found with papis_id '%s'"
                (length results) papis-id)))))
#+end_src

** Org-links
*** =papis=

#+begin_src emacs-lisp
(require 'ol-doi)
(org-link-set-parameters "papis"
                         :follow (lambda (papis-id)
                                   (papis-open (papis--from-id papis-id)))
                         :export #'ol-papis-export
                         :complete (lambda (&optional arg)
                                     (format "papis:%s"
                                             (papis--doc-get (papis--read-doc)
                                                             "papis_id")))
                         :insert-description
                         (lambda (link desc)
                           (let* ((papis-id (string-replace "papis:"  "" link))
                                  (doc (papis--from-id papis-id)))
                             (papis--doc-get doc "title"))))

(defun ol-papis-export (papis-id description format info)
  (let* ((doc (papis--from-id papis-id))
        (doi (papis--doc-get doc "doi"))
        (url (papis--doc-get doc "url")))
    (cond
      (doi (org-link-doi-export doi description format info)))))

#+end_src




** Paper sections
When doing research, often you would like to create some notes on every paper
and write some sections with the section titles being links to the papers
with some properties so that you can use org-mode's colum mode.

You can use the following function to create a link with properties

#+begin_src emacs-lisp
(defun papis-org-insert-heading (doc)
  (interactive (list (papis--read-doc)))
  (let ((title (papis--doc-get doc "title"))
        (author (papis--doc-get doc "author"))
        (year (papis--doc-get doc "year"))
        (doi (papis--doc-get doc "doi"))
        (papis-id (papis--doc-get doc "papis_id")))
    (org-insert-heading)
    (insert (format "[[papis:%s][%s]]" papis-id title))
    (org-set-property "PAPIS_ID" papis-id)
    (org-set-property "AUTHOR" author)
    (org-set-property "TITLE" title)
    (org-set-property "YEAR" (format "%s" year))
    (org-set-property "DOI" doi)))
#+end_src


A recommendation can be to write as the =COLUMNS=
variable and the =PROPERTIES= like so

#+begin_example
#+COLUMNS: %7TODO %5YEAR %10AUTHOR %45TITLE %TAGS
#+PROPERTIES: TITLE AUTHOR YEAR
#+end_example

and then you can turn on the =org-columns= mode.


** =org-ref= compatibility
*** Open pdfs
=org-ref= can open the pdf of a publicaction
from the =cite:my-reference= link, but in the case of papis
this pdf lives in an isolated folder of its own.

However in =org-ref= you can customize how you get the pdf
from the =cite= link through the
elisp:org-ref-get-pdf-filename-function.
Therefore, in order to use papis to open the pdf of the referenced
documents you can set

#+begin_src emacs-lisp :tangle no :eval no
(setq org-ref-get-pdf-filename-function
      #'papis-org-ref-get-pdf-filename)
#+end_src

Its implementation is given below:
#+begin_src emacs-lisp
(defun papis-org-ref-get-pdf-filename (key)
    (interactive)
    (let* ((docs (papis-query (format "ref:'%s'" key)))
           (doc (car docs))
           (files (papis--get-file-paths doc)))
      (pcase (length files)
        (1 (car files))
        (_ (completing-read "" files)))))
#+end_src
*** Citations
In general it is recommended to use the citation mechanisms of
=org-ref=, however, if for some reason you would like to cite
directly from =papis=, you can use the function

#+begin_src emacs-lisp
(defun papis-insert-citation (doc)
  (interactive (list (papis--read-doc)))
  (let* ((ref (papis--get-ref doc)))
    (if (fboundp 'citar-insert-citation)
        (citar-insert-citation (list ref))
      (insert (format "[cite:@%s]" ref)))))
#+end_src

and we will need also a way of listing all the keys of the document
for further functions. I took this from the good =citar= package

#+begin_src emacs-lisp

(defun papis-org-list-keys ()
  "List citation keys in the org buffer."
  (let ((org-tree (org-element-parse-buffer)))
    (delete-dups
     (org-element-map org-tree 'citation-reference
       (lambda (r) (org-element-property :key r))
       org-tree))))

#+end_src


** Bibtex entries
#+begin_warning
Note that this needs the command =papis-exec=,
which is available in papis from version =0.12= onwards.
#+end_warning

In this section we want to develop a way to generate a bibtex bibliography
from references appearing in the document currently being edited.

*** Convert references into bibtex entries
 First we need a script that accepts a list of

 #+name: references-to-bibtex-python-script
 #+begin_src python
import argparse
import papis.api
from papis.bibtex import to_bibtex

parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,
                                 description='')
parser.add_argument('refs', help='References', action='store', nargs='*')
args = parser.parse_args()

docs = []

for ref in args.refs:
    docs.extend(papis.api.get_documents_in_lib(library=None, search=ref))

for d in docs:
    print(to_bibtex(d))
 #+end_src

 #+RESULTS: references-to-bibtex-python-script


 #+begin_src emacs-lisp :noweb no-export
(defvar papis--refs-to-bibtex-script
"
<<references-to-bibtex-python-script>>
")
 #+end_src

 #+begin_src emacs-lisp
(defun papis--refs-to-bibtex (refs)
  (let ((py-script (make-temp-file "papis-bibtex-script" nil ".py")))
    (with-temp-buffer
      (insert papis--refs-to-bibtex-script)
      (write-file py-script))
    (papis-exec py-script (s-join " " refs))))
 #+end_src


*** The =papis-bibtex-refs= dynamic block

 #+begin_src emacs-lisp
(defun papis-create-papis-bibtex-refs-dblock (bibfile)
  (insert (format "#+begin: papis-bibtex-refs :tangle %s" bibfile))
  (insert "\n")
  (insert "#+end:"))

(defun papis-extract-citations-into-dblock (&optional bibfile)
  (interactive)
  (if (org-find-dblock "papis-bibtex-refs")
      (progn
        (org-show-entry)
        (org-update-dblock))
    (papis-create-papis-bibtex-refs-dblock
     (or bibfile (read-file-name "Bib file: " nil "main.bib")))))
 #+end_src

 #+begin_src emacs-lisp
(defun org-dblock-write:papis-bibtex-refs (params)
  (let ((tangle-file (or (plist-get params :tangle)
                         (buffer-file-name)))
        (exports ":exports none"))
    (insert
     (format "#+begin_src bibtex %s :tangle %s\n"
             exports
             tangle-file)))
  (let* ((refs (papis-org-list-keys))
         (queries (mapcar (lambda (r) (format "ref:\"%s\"" r))
                          refs)))
    (insert (papis--refs-to-bibtex queries)))
  (insert "#+end_src\n"))
 #+end_src

** End
#+begin_src emacs-lisp
(provide 'papis)
#+end_src

* Bibliography
#+begin: papis-bibtex-refs :tangle /home/gallo/software/papis.el/main.bib
#+begin_src bibtex :exports none :tangle /home/gallo/software/papis.el/main.bib
@article{LiteratePrograKnuth1984,
  author = {Knuth, D. E.},
  doi = {10.1093/comjnl/27.2.97},
  issn = {0010-4620},
  issue = {2},
  journal = {The Computer Journal},
  language = {en},
  month = {2},
  pages = {97--111},
  publisher = {Oxford University Press (OUP)},
  title = {Literate Programming},
  url = {http://dx.doi.org/10.1093/comjnl/27.2.97},
  volume = {27},
  year = {1984},
}

#+end_src

#+end:

bibliography:main.bib
bibliographystyle:unsrt

